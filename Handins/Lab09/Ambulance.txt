integer VICCHANNEL = 1927;
integer OPENCHANNEL = 0;

float range = 10.0;
float HP = 100.0;
float step = 2.5;

vector homepos;

key vicKey;
string detName;
list victims = [];
integer vicnt = 0;

move()
{
    vector mpos = llGetPos();
    float angle = llFrand(TWO_PI);
    vector pos = <mpos.x+step*llCos(angle),mpos.y+step*llSin(angle),mpos.z>;
    llSetPos(pos);
}

load(string vicname)
{
    victims = victims + [vicname];
}

unload()
{
    integer i = 0;
    for (i = 0; i < vicnt; i++)
    {
        string fullname = llList2String(victims, i);
        string objname = llGetSubString(fullname, 0, 5);
        string HPname= llDeleteSubString(fullname, 0, 6);
        integer HP = (integer)((float)HPname * 100);
        llRezObject("Saved", llGetPos() + <i/5, i%5, 0>, ZERO_VECTOR, ZERO_ROTATION, HP/100);

    }
}

moveHome()
{
    llSay(OPENCHANNEL, "Moving Home");
    vector mpos = llGetPos();
    integer cnt = 0;
    while(llVecDist(mpos, homepos) > 5.0)
    {
        float x = homepos.x - mpos.x;
        float y = homepos.y - mpos.y;
        float z = llSqrt(x*x + y*y);
        mpos.x += step * x / z;
        mpos.y += step * y / z;
        llSetPos(mpos);
    }
    llSay(OPENCHANNEL, "Get Home");
}

moveTo(vector pos)
{
    llSay(OPENCHANNEL, "Moving to Building");
    vector mpos = llGetPos();
    while(llVecDist(mpos, pos) > 2.0)
    {
        float x = pos.x - mpos.x;
        float y = pos.y - mpos.y;
        float z = llSqrt(x*x + y*y);
        mpos.x += step * x / z;
        mpos.y += step * y / z;
        llSetPos(mpos);
    }
}


default 
{
    state_entry()
    {
        llSay(OPENCHANNEL, "Ambulance rez");
        llListen(OPENCHANNEL, "", NULL_KEY, "startv");
    }
    on_rez(integer r)
    {
        llResetScript();
    }
    listen(integer channel, string name, key id, string message)
    {
        state start;
    }
}

state start 
{
    state_entry()
    {
        llSensorRepeat("Album", NULL_KEY, (ACTIVE|PASSIVE), range, PI, 1);
        llListen(0, "", NULL_KEY, "stop");
    }
    no_sensor()
    {
        move();
    }
    sensor(integer total_number)
    {
        homepos = llDetectedPos(0);
        state searching;
    }
    listen(integer channel, string name, key id, string message)
    {
        llResetScript();
    }
}

state searching
{
    state_entry()
    {
        llSay(OPENCHANNEL, "Amb searching");
        llSensorRepeat("", NULL_KEY, (ACTIVE|PASSIVE), 20.0, PI, 1.0);
        llListen(OPENCHANNEL, "", NULL_KEY, "stop");
    }
    no_sensor()
    {
        move();
    }
    sensor(integer total_number)
    {
        integer x = 0;
        vector detpos;
        string objname;

        for (x = 0; x < total_number; x++)
        {
            detName = llDetectedName(x);
            objname = llGetSubString(detName, 0, 5);
            if (objname == "victim") 
            {
                detpos = llDetectedPos(x);
                moveTo(detpos);
                vicKey = llDetectedKey(x);
                llSay(VICCHANNEL, (string)vicKey);
                state load;
            }
        }
        llSay(OPENCHANNEL, "Amb searching");
        move();
    }
    listen(integer channel, string name, key id, string message )
    {
       llResetScript();
    }
}

state load
{
    state_entry()
    {
        llSensor("", vicKey,(ACTIVE|PASSIVE),range,PI);
    }
    no_sensor()
    {
        state searching;
    }
    sensor(integer total_number)
    {
        load(detName);
        vicnt++;
        if (vicnt >= 10)
        {
            state back;
        }
        state searching;
    }
}

state back 
{
    state_entry()
    {
        moveHome();
        unload();
        vicnt = 0;
        state searching;
    }
}
