integer fieryness = 0;
float threshold = 0.75/200;
float maxFireTranRate = 1.0/200;
float fireTranRate = 1.0/200;
float burningTimeRate = 0;
float fireProc = 1;
integer isBurning = 0;
integer buildingCode = 1;
float deltaT = 1;
float sleepTime = 10;

string objName = "RN_Building_N0";
integer OPENCHANNEL = 0;

setName()
{
    if (isBurning == 0)
    {
        llSetObjectName("RN_Building_N" + (string)fieryness);
    }
    else 
    {
        if (burningTimeRate * fireTranRate > threshold)
        {
            llSetObjectName("RT_Building_F" + (string)fieryness);
        }
        else 
        {
            llSetObjectName("RN_Building_F" + (string)fieryness);
        }
    }
}

generalParticleEmitterOn()                
{   
    llParticleSystem([                   
        PSYS_PART_FLAGS , 0 
    //| PSYS_PART_BOUNCE_MASK       //Bounce on object's z-axis
    | PSYS_PART_WIND_MASK           //Particles are moved by wind
    | PSYS_PART_INTERP_COLOR_MASK   //Colors fade from start to end
    | PSYS_PART_INTERP_SCALE_MASK   //Scale fades from beginning to end
    | PSYS_PART_FOLLOW_SRC_MASK     //Particles follow the emitter
    | PSYS_PART_FOLLOW_VELOCITY_MASK//Particles are created at the velocity of the emitter
    //| PSYS_PART_TARGET_POS_MASK   //Particles follow the target
    | PSYS_PART_EMISSIVE_MASK       //Particles are self-lit (glow)
    //| PSYS_PART_TARGET_LINEAR_MASK//Undocumented--Sends particles in straight line?
    ,
    
    //PSYS_SRC_TARGET_KEY , NULL_KEY,//The particles will head towards the specified key
    //Select one of the following for a pattern:
    //PSYS_SRC_PATTERN_DROP                 Particles start at emitter with no velocity
    //PSYS_SRC_PATTERN_EXPLODE              Particles explode from the emitter
    //PSYS_SRC_PATTERN_ANGLE                Particles are emitted in a 2-D angle
    //PSYS_SRC_PATTERN_ANGLE_CONE           Particles are emitted in a 3-D cone
    //PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY     Particles are emitted everywhere except for a 3-D cone
    
    PSYS_SRC_PATTERN,           PSYS_SRC_PATTERN_ANGLE_CONE
    
    ,PSYS_SRC_TEXTURE,           ""           //UUID of the desired particle texture, or inventory name
    ,PSYS_SRC_MAX_AGE,           0.0            //Time, in seconds, for particles to be emitted. 0 = forever
    ,PSYS_PART_MAX_AGE,          4.0            //Lifetime, in seconds, that a particle lasts
    ,PSYS_SRC_BURST_RATE,        0.5            //How long, in seconds, between each emission
    ,PSYS_SRC_BURST_PART_COUNT,  6              //Number of particles per emission
    ,PSYS_SRC_BURST_RADIUS,      10.0           //Radius of emission
    ,PSYS_SRC_BURST_SPEED_MIN,   .4             //Minimum speed of an emitted particle
    ,PSYS_SRC_BURST_SPEED_MAX,   .5             //Maximum speed of an emitted particle
    ,PSYS_SRC_ACCEL,             <0,0,1>    //Acceleration of particles each second
    ,PSYS_PART_START_COLOR,      <1,0,0>  //Starting RGB color
    ,PSYS_PART_END_COLOR,        <1,1,0>  //Ending RGB color, if INTERP_COLOR_MASK is on 
    ,PSYS_PART_START_ALPHA,      1.0            //Starting transparency, 1 is opaque, 0 is transparent.
    ,PSYS_PART_END_ALPHA,        1.0            //Ending transparency
    ,PSYS_PART_START_SCALE,      <.25,.25,.25>  //Starting particle size
    ,PSYS_PART_END_SCALE,        <1.5,1.5,1.5>  //Ending particle size, if INTERP_SCALE_MASK is on
    ,PSYS_SRC_ANGLE_BEGIN,       300 * DEG_TO_RAD //Inner angle for ANGLE patterns
    ,PSYS_SRC_ANGLE_END,         60 * DEG_TO_RAD//Outer angle for ANGLE patterns
    ,PSYS_SRC_OMEGA,             <0.0,0.0,0.0>  //Rotation of ANGLE patterns, similar to llTargetOmega()
            ]);
}

generalParticleEmitterOff()
{
    llParticleSystem([]);
}

setFiryness()
{
    if (isBurning == 1)
    {
        if (burningTimeRate > 0 && burningTimeRate <= 0.33)
        {
            fieryness = 1;
        }
        else if (burningTimeRate <= 0.67) 
        {
            fieryness = 2;
        }
        else 
        {
            fieryness = 3;
        }
    }
    else 
    {
        if (burningTimeRate == 0)
        {
            fieryness = 0;
        }
        else if (burningTimeRate <= 0.2)
        {
            fieryness = 5;
        }
        else if (burningTimeRate <= 0.7) 
        {
            fieryness = 6;
        }
        else 
        {
            fieryness = 7;
        }
    }
}

init()
{
    llSetObjectName(objName);
    fieryness = 0;
    maxFireTranRate = 1.8/200;
    fireTranRate = maxFireTranRate;
    burningTimeRate = 0;
    isBurning = 0;
    buildingCode = 0;
    generalParticleEmitterOff();
}

default{
    state_entry()
    {
        init();
        llListen(OPENCHANNEL, "", NULL_KEY, "start");
    }
    touch_start(integer num)
    {
        if (isBurning == 0)
        {
            generalParticleEmitterOn();
            isBurning = 1;
        }
        else if (isBurning = 1)
        {
            generalParticleEmitterOff();
            isBurning = 0;
        }
    }
    listen(integer channel, string name, key id, string message)
    {
        state start;
    }
}

state start
{
    state_entry()
    {
        llSay(0, "started");
        setName();
        if (isBurning == 1)
        {
            fireProc = 1;
            state burning;
        }
        if (burningTimeRate > 1)
        {
            state die;
        }
        llSensorRepeat( "", NULL_KEY, (ACTIVE|PASSIVE), 10 , PI, 0.5);
        llListen(OPENCHANNEL, "", NULL_KEY, "stop");
    }

    listen(integer channel, string name, key id, string message)
    {
        llSay(OPENCHANNEL, "stopped");
        generalParticleEmitterOff();
        llResetScript();
    }

    sensor(integer total_number)
    {
        integer x = 0;
        string detname;
        string detlevel;
        for (x = 0; x < total_number; x++)
        {
            detname = llDetectedName(x);
            detlevel = llGetSubString(detname, 1, 1);
            if (detlevel == "T") 
            {
                llSay(0, "sensed");
                generalParticleEmitterOn();
                isBurning = 1;
                fireProc = 1;
                state burning;
            }
        }
    }
}

state burning
{
    state_entry()
    {
        setName();
        fireProc = 1;
        fireTranRate = maxFireTranRate;
        llSay(OPENCHANNEL, "burning");
        llListen(OPENCHANNEL, "", NULL_KEY, "stop");
        llSensorRepeat("firePreventor", NULL_KEY, (ACTIVE|PASSIVE), 3 , PI, 0.5);
        llSetTimerEvent(deltaT);
    }
    listen(integer channel, string name, key id, string message)
    {
        llSay(OPENCHANNEL, "stopped");
        generalParticleEmitterOff();
        llResetScript();
    }
    timer()
    {
        burningTimeRate = burningTimeRate + fireTranRate;
        if (burningTimeRate > 1)
        {
            state die;
        }
        setFiryness();
        llSay(OPENCHANNEL, (string)(burningTimeRate));
        setName();
    }
    sensor(integer total_number)
    {
        state extinguish;
    }
}

state extinguish
{
    state_entry()
    {
        llListen(0, "", NULL_KEY, "stop");
        llSensorRepeat("firePreventor", NULL_KEY, (ACTIVE|PASSIVE), 3 , PI, deltaT);
    }
    listen(integer channel, string name, key id, string message)
    {
        llSay(0,"stopped");
        generalParticleEmitterOff();
        llResetScript();
    }
    sensor(integer total_number)
    {
        llSay(0, "fieryness "+ (string)fieryness);
        setFiryness();
        if( fieryness == 1 )
        {
            fireProc = fireProc - 0.1 * total_number;
            fireTranRate = maxFireTranRate * 200 / (200 + 100 * total_number);
            if(fireProc <= 0)
            {
                llSay(OPENCHANNEL, "putout");
                isBurning = 0;
                generalParticleEmitterOff();
                fireTranRate = maxFireTranRate;
                state sleep;
            }
            burningTimeRate = burningTimeRate + fireTranRate;
            setFiryness();
        }
        else if( fieryness == 2 )
        {
            fireProc = fireProc - 0.05 * total_number;
            fireTranRate = maxFireTranRate * 200 / (200 + 50 * total_number);
            if(fireProc <= 0)
            {
                llSay(OPENCHANNEL, "putout");
                isBurning = 0;
                generalParticleEmitterOff();
                fireTranRate = maxFireTranRate;
                state sleep;
            }
            burningTimeRate = burningTimeRate + fireTranRate;
            setFiryness();
        }
        else if( fieryness == 3 )
        {
            fireProc = fireProc - 0.025 * total_number;
            fireTranRate = maxFireTranRate * 200 / (200 + 25 * total_number);
            if(fireProc <= 0)
            {
                llSay(OPENCHANNEL, "putout");
                isBurning = 0;
                generalParticleEmitterOff();
                fireTranRate = maxFireTranRate;
                state sleep;
            }
            burningTimeRate = burningTimeRate + fireTranRate;
            setFiryness();
        }
        else 
        {
            llSay(OPENCHANNEL, "putout");
            isBurning = 0;
            setName();
            generalParticleEmitterOff();
            fireTranRate = maxFireTranRate;
            state sleep;
        }
        if (burningTimeRate >= 1)
        {
            state die;
        }
        if (total_number <= 0)
        {
            state burning;
        }
    }
}

state sleep
{
    state_entry()
    {
        setName();
        llListen(0, "", NULL_KEY, "stop");
        llSay(0, "start sleep");
        llSleep(sleepTime);
        llSay(0, "sleep stoped");
        state start;
    }
    listen(integer channel, string name, key id, string message)
    {
        llSay(0,"stoped");
        generalParticleEmitterOff();
        llResetScript();
    }
}

state die
{
    state_entry()
    {
        llSay(0,"died");
        llSetObjectName("died");
        llListen(OPENCHANNEL, "", NULL_KEY, "stop");
        generalParticleEmitterOff();
    }
    listen( integer channel, string name, key id, string message )
    {
        llSay(0,"stopped");
        llResetScript();
    }
}