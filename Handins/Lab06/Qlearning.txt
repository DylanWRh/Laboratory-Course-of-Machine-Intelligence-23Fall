integer OPEN_CHANNEL = 0;
list R;
list Q;
float lr;
integer totol_epoch;
// We represent room A as 0, room B as 1, etc.
integer cur_room;
list room_pos;

init()
{
    R = [
        -1.0, -1.0, -1.0, -1.0,  0.0,  -1.0, 
        -1.0, -1.0, -1.0,  0.0, -1.0, 100.0, 
        -1.0, -1.0, -1.0,  0.0, -1.0,  -1.0,
        -1.0,  0.0,  0.0, -1.0,  0.0,  -1.0,
         0.0, -1.0, -1.0,  0.0, -1.0, 100.0,
        -1.0,  0.0, -1.0, -1.0,  0.0, 100.0
    ];
    Q = [
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0
    ];
    lr = 0.8;
    cur_room = -1;
    room_pos = [
        <10.0, 108.0, 22.0>,
        <18.0,  92.0, 22.0>,
        <26.0, 100.0, 22.0>,
        <18.0, 100.0, 22.0>,
        <10.0, 100.0, 22.0>,
        <10.0,  92.0, 22.0>
    ];
}

move_slowly(vector cur_pos, vector target_pos)
{
    integer i;
    for(i = 1; i <= 2; i++)
    {
        vector ppos = cur_pos * (2.0 - i) / 2.0 + target_pos * i / 2.0;
        llSetPos(ppos);
    }
}

list get_choices(integer idx)
{
    list choices = llList2List(R, idx * 6, idx * 6 + 5);
    list stable_choices = [];
    integer i;
    for (i = 0; i < 6; i++)
    {
        float choice = llList2Integer(choices, i);
        if (choice >= 0.0)
        {
            stable_choices = stable_choices + [i];
        }
    }
    return stable_choices;
}

learn_one_epoch(integer ep)
{
    cur_room = (integer)llFrand(5);
    llSay(OPEN_CHANNEL, "Epoch " + (string)ep + " start!");
    llSetPos(llList2Vector(room_pos, cur_room));
    llSleep(0.5);
    integer not_stop = 1;
    while(1)
    {
        list cur_room_choices = get_choices(cur_room);
        integer next_room_idx = (integer)llFrand(llGetListLength(cur_room_choices));
        integer next_room = llList2Integer(cur_room_choices, next_room_idx);
        integer Q_modify_idx = 6 * cur_room + next_room;
        
        list next_room_choices = get_choices(next_room);
        integer i;
        float max_val = 0;
        for (i = 0; i < llGetListLength(next_room_choices); i++)
        {
            integer cur_val_idx = 6 * next_room + llList2Integer(next_room_choices, i);
            float cur_val = llList2Float(Q, cur_val_idx);
            if (cur_val > max_val)
            {
                max_val = cur_val;
            }
        }
        max_val = llList2Float(R, 6 * cur_room + next_room) + lr * max_val;

        if (Q_modify_idx == 0)
        {
            Q = [max_val] + llList2List(Q, 1, 35);
        }
        else if (Q_modify_idx == 35)
        {
            Q = llList2List(Q, 0, 34) + [max_val];
        }
        else 
        {
            Q = llList2List(Q, 0, Q_modify_idx-1) + [max_val] + llList2List(Q, Q_modify_idx+1, 35);
        }
        
        if (cur_room == 5)
        {
            not_stop = 0;
            return;
        }
        move_slowly(llGetPos(), llList2Vector(room_pos, next_room));
        llSleep(0.05);
        cur_room = next_room;
    }
}

integer room2idx(string room)
{
    if (room == "A" || room == "a")
    {
        return 0;
    }
    else if (room == "B" || room == "b") {
        return 1;
    } 
    else if (room == "C" || room == "c") { 
        return 2;
    }
    else if (room == "D" || room == "d") {
        return 3;
    }
    else if (room == "E" || room == "e") {
        return 4;
    }
    else if (room == "F" || room == "f") {
        return 5;
    }
    return -1;
}

string idx2room(integer idx)
{
    list rooms = ["A", "B", "C", "D", "E", "F"];
    if (idx >= 0 && idx < 6)
    {
        return llList2String(rooms, idx);
    }
    else 
    {
        return "Illegal room";
    }
}

default 
{
    state_entry()
    {
        init();
        state ready;
    }
}

state ready
{
    state_entry()
    {
        llSay(OPEN_CHANNEL, "What should I do? learn or start");
        llListen(OPEN_CHANNEL, "", NULL_KEY, "");
    }
    listen(integer channel, string name, key id, string message)
    {
        if (message == "learn")
        {
            state learn;
        }
        else if (message == "start")
        {
            cur_room = -1;
            state room;
        }
        else 
        {
            llSay(OPEN_CHANNEL, "What should I do? learn or start");
        }
    }
}

state room 
{
    state_entry()
    {
        llListen(OPEN_CHANNEL, "", NULL_KEY, "");
        llSay(OPEN_CHANNEL, "Which room should I start from?");
    }
    listen(integer channel, string name, key id, string message)
    {
        cur_room = room2idx(message);
        if (cur_room >= 0 && cur_room < 6)
        {
            llSetPos(llList2Vector(room_pos, cur_room));
            llSleep(0.5);
            state start;
        }
        else
        {
            llSay(OPEN_CHANNEL, "Which room am I in?");
        }
    }
}

state learn
{
    state_entry()
    {
        llSay(OPEN_CHANNEL, "How many epochs should I learn?");
        llListen(OPEN_CHANNEL, "", NULL_KEY, "");
    }
    listen(integer channel, string name, key id, string message)
    {
        totol_epoch = (integer)message;
        if (totol_epoch > 0)
        {
            state learning;
        }
        llSay(OPEN_CHANNEL, "How many epochs should I learn?");
    }
}

state learning
{
    state_entry()
    {
        integer i;
        for(i = 1; i <= totol_epoch; i++)
        {
            learn_one_epoch(i);
        }
        llSay(OPEN_CHANNEL, "Learning Done!");
        llSay(OPEN_CHANNEL, "Here's the Q matrix");
        for (i = 0; i < 6; i++)
        {
            integer j;
            string Qres = "";
            for(j = 0; j < 6; j++)
            {   
                Qres = Qres + (string)llList2Float(Q, 6*i+j) + " ";
            }
            llSay(OPEN_CHANNEL, Qres);
        }
        state ready;
    }
}

state start
{
    state_entry()
    {
        llListen(OPEN_CHANNEL, "", NULL_KEY, "stop");
        integer not_stop = 1;
        while (not_stop)
        {
            llSay(OPEN_CHANNEL, "Current room " + idx2room(cur_room));
            if (cur_room == 5)
            {
                llSay(OPEN_CHANNEL, "Done!");
                not_stop = 0;
            }
            else 
            {
                list next_room_choices = get_choices(cur_room);
                integer next_room = -1;
                float max_val = -1.0;
                integer i;
                for (i = 0; i < llGetListLength(next_room_choices); i++)
                {
                    integer cur_val_idx = 6 * cur_room + llList2Integer(next_room_choices, i);
                    float cur_val = llList2Float(Q, cur_val_idx);
                    if (cur_val > max_val)
                    {
                        max_val = cur_val;
                        next_room = llList2Integer(next_room_choices, i);
                    }
                }
                move_slowly(llGetPos(), llList2Vector(room_pos, next_room));
                llSleep(0.05);
                cur_room = next_room;
            }
        }
        llSay(OPEN_CHANNEL, "Enter q to quit!");
        llListen(OPEN_CHANNEL, "", NULL_KEY, "q");
    }
    listen(integer channel, string name, key id, string message)
    {
        if (message == "stop" || message == "q")
        {
            state ready;
        } 
    }
}