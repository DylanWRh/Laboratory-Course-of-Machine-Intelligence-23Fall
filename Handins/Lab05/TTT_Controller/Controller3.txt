// 0 SHOW BLANK 
// 1 SHOW X 
// 2 SHOW O

integer BLANK = 0;
integer X = 1;
integer O = 2;
integer whoseTurn = 2;
integer GET_TILE = 3;

list tileToLink = [
    0, 0, 0,
    0, 0, 0,
    0, 0, 0
];

list board = [
    0, 0, 0,
    0, 0, 0,
    0, 0, 0
];

setLinkTile(integer link, integer tile)
{
    if (tile == 0)
    {
        tileToLink = [link] + llList2List(tileToLink, 1, 8);
    }
    else if (tile == 8)
    {
        tileToLink = llList2List(tileToLink, 0, 7) + [link];
    }
    else
    {
        tileToLink = 
            llList2List(tileToLink, 0, tile - 1) + 
            [link] + 
            llList2List(tileToLink, tile + 1, 8);
    }
}

integer getLinkToTile(integer link)
{
    return llListFindList(tileToLink, [link]);
}

integer getTileToLink(integer tile)
{
    return llList2Integer(tileToLink, tile);
}

integer getBoardAt(integer tile)
{
    return llList2Integer(board, tile);
}

integer tileIsBlank(integer tile)
{
    return getBoardAt(tile) == BLANK;
}

setBoard(integer tile, integer player)
{
    if (tile == 0)
    {
        board = [player] + llList2List(board, 1, 8);
    }
    else if (tile == 8)
    {
        board = llList2List(board, 0, 7) + [player];
    }
    else
    {
        board = 
            llList2List(board, 0, tile - 1) + 
            [player] + 
            llList2List(board, tile + 1, 8);
    }
}

announceTurn()
{
    if (whoseTurn == X)
    {
        llSay(0, "It's X's turn");
    }
    else if (whoseTurn == O)
    {
        llSay(0, "It's O's turn");
    }
}

setLinkTo(integer linkNum, integer player)
{
    llMessageLinked(linkNum, player, "", NULL_KEY);
}

setTileTo(integer tile, integer player)
{
    setBoard(tile, player);
    setLinkTo(getTileToLink(tile), player);
}

resetGame()
{
    setLinkTo(LINK_ALL_OTHERS, BLANK);
    whoseTurn = X;
    board = [
        BLANK, BLANK, BLANK,
        BLANK, BLANK, BLANK,
        BLANK, BLANK, BLANK
    ];
}

default
{
    state_entry()
    {
        llMessageLinked(LINK_ALL_OTHERS, GET_TILE, "", NULL_KEY);        
        resetGame();
        announceTurn();
    }

    link_message(integer sender, integer num, string s, key k)
    {
        setLinkTile(sender, num);
    }

    touch_start(integer num_detected)
    {
        if (llDetectedLinkNumber(0) == llGetLinkNumber())
        {
            // user touched the controller prim, reset the game
            resetGame();
        }
        else
        {
            integer tile = getLinkToTile(llDetectedLinkNumber(0));
            if (tile != -1)
            {
                if (tileIsBlank(tile))
                {
                    setTileTo(tile, whoseTurn);
                    whoseTurn = 3 - whoseTurn;
                }
                announceTurn();
            }
        }
    }
}