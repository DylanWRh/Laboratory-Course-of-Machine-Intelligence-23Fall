doParticles()
{
    // Create a burst of fireworks like particles with
    // a random color
    vector vColor = <llFrand(1.0), 0, 0>;
    llParticleSystem( [
        PSYS_SRC_PATTERN, PSYS_SRC_PATTERN_EXPLODE,
        PSYS_SRC_BURST_RATE, 1.0,
        PSYS_SRC_BURST_PART_COUNT, 50,
        PSYS_SRC_MAX_AGE, 1.0,
        PSYS_SRC_ACCEL, <0.0, 0.0, -9.0>,
        PSYS_SRC_BURST_SPEED_MIN, 6.0,
        PSYS_SRC_BURST_SPEED_MAX, 7.0,
        PSYS_PART_EMISSIVE_MASK, 1,
        PSYS_PART_START_COLOR, vColor
        ]);
} 

default
{ 
    state_entry()
    {
        // Turn on physics and phantom
        llSetStatus(STATUS_PHYSICS | STATUS_PHANTOM, TRUE);        
        // make the object float        
        llSetBuoyancy(1.0);       
        // reset particle parameters
        llParticleSystem([]);
    }
    
    on_rez(integer p)
    {
        if (p != 0)
        {
            // rezzed from a script, apply an upwards impulse and
            // set a timer
            vector vImpulse = <
                llFrand(1.5) - 0.75, 
                llFrand(1.5) - 0.75,
                llFrand(2.0) + 4.0>;
            llApplyImpulse(vImpulse, FALSE);
            llSetTimerEvent(1.0);
        }
        else
        {
            // rezzed from resident inventory, turn off physics
            // and cancel the timer
            llSetStatus(STATUS_PHYSICS, FALSE);
            llSetTimerEvent(0.0);
        }
    }
    timer()
    {
        // fire the particle effect, sleep for 1 second
        // then die
        doParticles();
        llSleep(1.0);
        llDie();
    }
}
