// Magic Answer Ball
// Version 3
// 
// Provide a random personalized answer to anyone or anything speaks
// on the public channel

// Script will only answer qestions prefixed by this string
string questionPrefix = "Magic Ball, ";

// provide these instructions with touched
// script will add the questionPrefix string to this string
string instructions = 
    "Ask me a yes or no question starting with ";
    
// The global variable holding all the answers
list answers = [
    // positive answers
    "Yes, ",
    "It is certain, ",
    "All signs point to yes, ",
    "You may rely on it, ",
    "Without a doubt, ",
    // negative answers
    "No, ",
    "Absolutely not, ",
    "Doubtful, ",
    "Most assuredly not, ",
    "My sources say no, ",
    //non commital answers
    "Outlook hazy, ",
    "Uncertain, ",
    "The answer is unknowable, ",
    "I'd better not tell you now, ",
    "Cannot predict that at this time, "
];

// pick a random answer from the list of answers and return it
string generateAnswer()  
{
    // generate a random number between 0 and the length of the 
       // list (but not exactly the length of the list), then cast it 
       // to an integer. This will give us a random number betwen 0 
       // and the length of the list - 1.
    integer answerIndex = 
        (integer)llFrand(llGetListLength(answers));
    
    // return the answerIndex'th item of the list answers
    return llList2String(answers, answerIndex);
}    

// return TRUE if str starts with prefix.
integer startsWith(string str, string prefix)
{
    // get the substring of the string, from 0 to the length
    // of the prefix, and compare this substring to prefix
    return
        llGetSubString(str, 0, llStringLength(prefix) - 1) == 
               prefix;
}

// Return TRUE if candidate is a question, which is to say, if 
   // the candidate begins with the question prefix.  This function 
   // is case-insensitive (it ignores differences between upper and 
   // lower case in the candidate and prefix)
integer isAQuestion(string candidate)
{
    return startsWith(llToUpper(candidate),
         llToUpper(questionPrefix));
}

default
{
    state_entry()
    {
        // listen on the public chat channel for any text 
           // from anyone or anything.
        llListen(0, "", NULL_KEY, "");
    }
    
    touch_start(integer total_number)
    {
        // provide instructions
        llSay(0, instructions + "\"" + questionPrefix + "\"");
    }
    
    listen(integer channel, string name, key id, string message)
    {
        // script heard something, if it's a question for 
           // this script, answer it.
        if (isAQuestion(message))
        {
            llSay(0, generateAnswer() + name);
        }
    }
}