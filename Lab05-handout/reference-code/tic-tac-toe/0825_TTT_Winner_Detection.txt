// Check the board to see if a player has won.  Return X if X has 
// won, O if O has won, or BLANK if there is no winner
integer detectWinner()
{
    // Check diagonals
 // the center tile must be used for a diagonal to win
    if (getBoardAt(4) != BLANK) 
    {
        if (
            // top left to bottom right
            ((getBoardAt(0) == getBoardAt(4)) && 
             (getBoardAt(0) == getBoardAt(8))) ||
            // top right to bottom left
            ((getBoardAt(2) == getBoardAt(4)) && 
             (getBoardAt(2) == getBoardAt(6))) 
          )  
        {
            return getBoardAt(4);
        }
    }
    
    // check rows
    integer row;
    for (row = 0; row < 9; row = row + 3)
    {
        integer first = getBoardAt(0 + row);
        if (
            (first != BLANK) &&
            (first == getBoardAt(1 + row)) &&
            (first == getBoardAt(2 + row))
            )
            {
                return first;           
            }           
    } 
    // check columns
    integer col;
    for (col = 0; col < 9; col = col + 3)
    {
        integer first = getBoardAt(0 + col);
        if (
            (first != BLANK) &&
            (first == getBoardAt(3 + col)) &&
            (first == getBoardAt(6 + col))
            )
            {
                return first;           
            }           
    }
    return BLANK;    
}

// return TRUE if no one can win
// This only detects if the board is full.
integer detectDraw()
{
    return llListFindList(board, [BLANK]) == -1;
}
